import{j as s,s as e,g as a}from"./index-Bj4LppqR.js";const r=()=>s.jsxs(s.Fragment,{children:[s.jsxs("p",{className:e.description,children:['For my graduate level course "Advanced Rendering" (CIS 4610), I programmed a GPU-based Monte Carlo Path Tracer in GLSL using concepts from this book:'," ",s.jsx("a",{href:"https://www.pbr-book.org/",target:"_blank",rel:"noopener noreferrer",children:"Physically Based Rendering"}),". My implementation supports multiple sampling methods, lighting integrators, physically based materials, and light sources."]}),s.jsxs("div",{className:e.mediaRow,children:[s.jsxs("figure",{className:e.mediaItem,children:[s.jsx("img",{src:a("projects/myCornellBoxFull.png"),alt:"Cornell Box with Full Integration",className:e.media}),s.jsx("figcaption",{className:e.caption,children:"Cornell Box w full integration"})]}),s.jsxs("figure",{className:e.mediaItem,children:[s.jsx("img",{src:a("projects/myNoLight.png"),alt:"Cornell Box with no lights",className:e.media}),s.jsx("figcaption",{className:e.caption,children:"Cornell Box w only env light"})]})]}),s.jsxs("div",{className:e.mediaRow,children:[s.jsxs("figure",{className:e.mediaItem,children:[s.jsx("img",{src:a("projects/myRoughMirrorFull.png"),alt:"Cornell Box with rough mirror",className:e.media}),s.jsx("figcaption",{className:e.caption,children:"Cornell Box w rough mirror"})]}),s.jsxs("figure",{className:e.mediaItem,children:[s.jsx("img",{src:a("projects/mySpotLightFull.png"),alt:"Cornell Box with spotlight",className:e.media}),s.jsx("figcaption",{className:e.caption,children:"Cornell Box w spotlight"})]})]}),s.jsxs("div",{className:e.mediaRow,children:[s.jsxs("figure",{className:e.mediaItem,children:[s.jsx("img",{src:a("projects/glasskirby.png"),alt:"Glass Kirby",className:e.media}),s.jsx("figcaption",{className:e.caption,children:"Glass Kirby"})]}),s.jsxs("figure",{className:e.mediaItem,children:[s.jsx("img",{src:a("projects/carby.png"),alt:"Car Kirby",className:e.media}),s.jsx("figcaption",{className:e.caption,children:"Car Kirby"})]})]})]});export{r as MonteCarloPathTracerDetail,r as default};
